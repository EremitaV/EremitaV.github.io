[{"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\index.js":"1","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\App.js":"2","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\registerServiceWorker.js":"3","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Layout.js":"4","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Home.js":"5","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\FetchData.js":"6","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Counter.js":"7","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\NavMenu.js":"8","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Tenzies.js":"9","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Die.js":"10","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Question.js":"11","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Quiz.js":"12","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\QuizOption.js":"13"},{"size":521,"mtime":1641901238886,"results":"14","hashOfConfig":"15"},{"size":1046,"mtime":1643621941067,"results":"16","hashOfConfig":"15"},{"size":4121,"mtime":1641901238888,"results":"17","hashOfConfig":"15"},{"size":373,"mtime":1641901238917,"results":"18","hashOfConfig":"15"},{"size":1734,"mtime":1641901238911,"results":"19","hashOfConfig":"15"},{"size":1552,"mtime":1642415403182,"results":"20","hashOfConfig":"15"},{"size":1063,"mtime":1642169727936,"results":"21","hashOfConfig":"15"},{"size":2052,"mtime":1642172194715,"results":"22","hashOfConfig":"15"},{"size":3762,"mtime":1642169508566,"results":"23","hashOfConfig":"15"},{"size":363,"mtime":1641975410000,"results":"24","hashOfConfig":"15"},{"size":1907,"mtime":1643702418395,"results":"25","hashOfConfig":"15"},{"size":4829,"mtime":1643702947936,"results":"26","hashOfConfig":"15"},{"size":415,"mtime":1643632014732,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"j7x0t7",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\index.js",[],["58","59","60"],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\App.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\registerServiceWorker.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Layout.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Home.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\FetchData.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Counter.js",["61"],"import React, { Component, useState } from 'react'\r\n\r\nfunction Counter() {\r\n\tconst [count ,setCount] = useState(0)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Counter</h1>\r\n\t\t\t<p>The current count is: {count}</p>\r\n\t\t\t<button \r\n\t\t\t\tclassName='blue-button'\r\n\t\t\t\tonClick={() => setCount(prev => prev + 1)}\r\n\t\t\t>Increment</button>\r\n    \t</div>\r\n\t)\r\n}\r\nexport default Counter; \r\n\r\n/*export class Counter extends Component {\r\n  static displayName = Counter.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentCount: 0 };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter() {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\r\n\r\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\NavMenu.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Tenzies.js",["62","63","64"],"import React, {useState, useEffect, Component} from \"react\"\nimport Die from \"./Die\"\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\n\nfunction Tenzies() {\n\n    const [dice, setDice] = useState(allNewDice())\n    const [tenzies, setTenzies] = useState(false)\n    const [numberOfRolls, setNumberOfRolls] = useState(1)\n    const [startTime, setStartTime] = useState(Date.now())\n    const [endTime, setEndTime] = useState(Date.now())\n    const [highscore, setHighScore] = useState(JSON.parse(localStorage.getItem(\"highscore\")) || {rolls: 1000, time: 1000})\n\n\n    useEffect(() => {\n        console.log(`numberOfRolls: ${numberOfRolls}`)\n        console.log(`current highscore: ${highscore.rolls}`)\n    }, [tenzies])\n    \n    useEffect(() => {\n        const allHeld = dice.every(die => die.isHeld)\n        const firstValue = dice[0].value\n        const allSameValue = dice.every(die => die.value === firstValue)\n        if (allHeld && allSameValue) {\n            setEndTime(Date.now())\n            setHighScore(prev => {\n                let res = {rolls: highscore.rolls, time: highscore.time}\n                if (numberOfRolls < highscore.rolls) {\n                    res.rolls = numberOfRolls\n                    localStorage.setItem(\"highscore\",JSON.stringify(res))\n                    setHighScore(res)\n                }\n                if (timeInSeconds(startTime, endTime) < highscore.time) {\n                    res.rolls = timeInSeconds(startTime, endTime)\n                    localStorage.setItem(\"highscore\",JSON.stringify(res))\n                    setHighScore(res)\n                }\n                return res\n            })\n            setTenzies(true)\n        }\n    }, [dice])\n\n    function generateNewDie() {\n        return {\n            value: Math.ceil(Math.random() * 6),\n            isHeld: false,\n            id: nanoid()\n        }\n    }\n    \n    function allNewDice() {\n        const newDice = []\n        for (let i = 0; i < 10; i++) {\n            newDice.push(generateNewDie())\n        }\n        return newDice\n    }\n    \n    function rollDice() {\n        if(!tenzies) {\n            setDice(oldDice => oldDice.map(die => {\n                return die.isHeld ? \n                    die :\n                    generateNewDie()\n            }))\n            setNumberOfRolls(prevCount => prevCount + 1)\n        } else {\n            setTenzies(false)\n            setDice(allNewDice())\n            setNumberOfRolls(1)\n            setStartTime(Date.now())\n        }\n    }\n    \n    function holdDice(id) {\n        setDice(oldDice => oldDice.map(die => {\n            return die.id === id ? \n                {...die, isHeld: !die.isHeld} :\n                die\n        }))\n    }\n\n    function timeInSeconds(startTime, endTime) {\n        return Math.floor((endTime-startTime)/ 1000)\n    }\n    \n    const diceElements = dice.map(die => (\n        <Die \n            key={die.id} \n            value={die.value} \n            isHeld={die.isHeld} \n            holdDice={() => holdDice(die.id)}\n        />\n    ))\n    \n    return (\n        <div className=\"main-container\">\n            {tenzies && <Confetti />}\n            <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. \n            Click each die to freeze it at its current value between rolls.</p>\n            <div className=\"dice-container\">\n                {diceElements}\n            </div>\n            <button \n                className=\"blue-button\" \n                onClick={rollDice}\n            >\n                {tenzies ? \"New Game\" : \"Roll\"}\n            </button>\n            {tenzies ? <p>You won in {numberOfRolls} rolls in {timeInSeconds(startTime, endTime)} seconds</p> : \"\"}\n        </div>\n    )\n}\n\nexport default Tenzies;","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Die.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Question.js",["65","66"],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Quiz.js",["67","68"],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\QuizOption.js",["69","70"],"import React, {useState} from \"react\";\r\n\r\nexport default function QuizOption(props) {\r\n    const styles = {\r\n        backgroundColor: 'green'\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onClick={() => props.handleClick()}\r\n            className={props.chosen\r\n                ? props.isCorrect ? \"option-chosen\" : \"option-wrong\"\r\n                : \"option-notchosen\"}\r\n        >{props.option}</div>\r\n    )\r\n}",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":1,"column":37,"nodeType":"79","messageId":"80","endLine":1,"endColumn":46},{"ruleId":"81","severity":1,"message":"82","line":19,"column":8,"nodeType":"83","endLine":19,"endColumn":17,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":43,"column":8,"nodeType":"83","endLine":43,"endColumn":14,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"87","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":12},{"ruleId":"81","severity":1,"message":"88","line":22,"column":7,"nodeType":"83","endLine":22,"endColumn":9,"suggestions":"89"},{"ruleId":"81","severity":1,"message":"90","line":19,"column":8,"nodeType":"83","endLine":19,"endColumn":10,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"92","line":37,"column":8,"nodeType":"83","endLine":37,"endColumn":19,"suggestions":"93"},{"ruleId":"77","severity":1,"message":"94","line":1,"column":16,"nodeType":"79","messageId":"80","endLine":1,"endColumn":24},{"ruleId":"77","severity":1,"message":"95","line":4,"column":11,"nodeType":"79","messageId":"80","endLine":4,"endColumn":17},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'highscore.rolls' and 'numberOfRolls'. Either include them or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'endTime', 'highscore.rolls', 'highscore.time', 'numberOfRolls', and 'startTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHighScore' needs the current value of 'highscore.rolls'.",["99"],"'Quiz' is defined but never used.","React Hook useEffect has missing dependencies: 'data.correct_answer' and 'data.incorrect_answers'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'questionOptions.numberOfQuestions'. Either include it or remove the dependency array.",["102"],"'useState' is defined but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [highscore.rolls, numberOfRolls, tenzies]",{"range":"113","text":"114"},"Update the dependencies array to be: [dice, endTime, highscore.rolls, highscore.time, numberOfRolls, startTime]",{"range":"115","text":"116"},"Update the dependencies array to be: [data.correct_answer, data.incorrect_answers]",{"range":"117","text":"118"},"Update the dependencies array to be: [getData]",{"range":"119","text":"120"},"Update the dependencies array to be: [questionOptions.numberOfQuestions, questions]",{"range":"121","text":"122"},[718,727],"[highscore.rolls, numberOfRolls, tenzies]",[1695,1701],"[dice, endTime, highscore.rolls, highscore.time, numberOfRolls, startTime]",[838,840],"[data.correct_answer, data.incorrect_answers]",[675,677],"[getData]",[1252,1263],"[questionOptions.numberOfQuestions, questions]"]