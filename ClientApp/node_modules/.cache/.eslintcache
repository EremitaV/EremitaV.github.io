[{"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\index.js":"1","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\App.js":"2","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\registerServiceWorker.js":"3","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Layout.js":"4","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Home.js":"5","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\FetchData.js":"6","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\NavMenu.js":"7","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Tenzies.js":"8","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Die.js":"9","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Question.js":"10","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Quiz.js":"11","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\QuizOption.js":"12","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Notes.js":"13"},{"size":521,"mtime":1641901238886,"results":"14","hashOfConfig":"15"},{"size":1039,"mtime":1643704941548,"results":"16","hashOfConfig":"15"},{"size":4121,"mtime":1641901238888,"results":"17","hashOfConfig":"15"},{"size":373,"mtime":1641901238917,"results":"18","hashOfConfig":"15"},{"size":1734,"mtime":1641901238911,"results":"19","hashOfConfig":"15"},{"size":1552,"mtime":1642415403182,"results":"20","hashOfConfig":"15"},{"size":2048,"mtime":1643704872270,"results":"21","hashOfConfig":"15"},{"size":3762,"mtime":1642169508566,"results":"22","hashOfConfig":"15"},{"size":363,"mtime":1641975410000,"results":"23","hashOfConfig":"15"},{"size":1907,"mtime":1643702418395,"results":"24","hashOfConfig":"15"},{"size":4829,"mtime":1643702947936,"results":"25","hashOfConfig":"15"},{"size":415,"mtime":1643632014732,"results":"26","hashOfConfig":"15"},{"size":179,"mtime":1643704802692,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"j7x0t7",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\index.js",[],["59","60","61"],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\App.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\registerServiceWorker.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Layout.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Home.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\FetchData.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\NavMenu.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Tenzies.js",["62","63","64"],"import React, {useState, useEffect, Component} from \"react\"\nimport Die from \"./Die\"\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\n\nfunction Tenzies() {\n\n    const [dice, setDice] = useState(allNewDice())\n    const [tenzies, setTenzies] = useState(false)\n    const [numberOfRolls, setNumberOfRolls] = useState(1)\n    const [startTime, setStartTime] = useState(Date.now())\n    const [endTime, setEndTime] = useState(Date.now())\n    const [highscore, setHighScore] = useState(JSON.parse(localStorage.getItem(\"highscore\")) || {rolls: 1000, time: 1000})\n\n\n    useEffect(() => {\n        console.log(`numberOfRolls: ${numberOfRolls}`)\n        console.log(`current highscore: ${highscore.rolls}`)\n    }, [tenzies])\n    \n    useEffect(() => {\n        const allHeld = dice.every(die => die.isHeld)\n        const firstValue = dice[0].value\n        const allSameValue = dice.every(die => die.value === firstValue)\n        if (allHeld && allSameValue) {\n            setEndTime(Date.now())\n            setHighScore(prev => {\n                let res = {rolls: highscore.rolls, time: highscore.time}\n                if (numberOfRolls < highscore.rolls) {\n                    res.rolls = numberOfRolls\n                    localStorage.setItem(\"highscore\",JSON.stringify(res))\n                    setHighScore(res)\n                }\n                if (timeInSeconds(startTime, endTime) < highscore.time) {\n                    res.rolls = timeInSeconds(startTime, endTime)\n                    localStorage.setItem(\"highscore\",JSON.stringify(res))\n                    setHighScore(res)\n                }\n                return res\n            })\n            setTenzies(true)\n        }\n    }, [dice])\n\n    function generateNewDie() {\n        return {\n            value: Math.ceil(Math.random() * 6),\n            isHeld: false,\n            id: nanoid()\n        }\n    }\n    \n    function allNewDice() {\n        const newDice = []\n        for (let i = 0; i < 10; i++) {\n            newDice.push(generateNewDie())\n        }\n        return newDice\n    }\n    \n    function rollDice() {\n        if(!tenzies) {\n            setDice(oldDice => oldDice.map(die => {\n                return die.isHeld ? \n                    die :\n                    generateNewDie()\n            }))\n            setNumberOfRolls(prevCount => prevCount + 1)\n        } else {\n            setTenzies(false)\n            setDice(allNewDice())\n            setNumberOfRolls(1)\n            setStartTime(Date.now())\n        }\n    }\n    \n    function holdDice(id) {\n        setDice(oldDice => oldDice.map(die => {\n            return die.id === id ? \n                {...die, isHeld: !die.isHeld} :\n                die\n        }))\n    }\n\n    function timeInSeconds(startTime, endTime) {\n        return Math.floor((endTime-startTime)/ 1000)\n    }\n    \n    const diceElements = dice.map(die => (\n        <Die \n            key={die.id} \n            value={die.value} \n            isHeld={die.isHeld} \n            holdDice={() => holdDice(die.id)}\n        />\n    ))\n    \n    return (\n        <div className=\"main-container\">\n            {tenzies && <Confetti />}\n            <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. \n            Click each die to freeze it at its current value between rolls.</p>\n            <div className=\"dice-container\">\n                {diceElements}\n            </div>\n            <button \n                className=\"blue-button\" \n                onClick={rollDice}\n            >\n                {tenzies ? \"New Game\" : \"Roll\"}\n            </button>\n            {tenzies ? <p>You won in {numberOfRolls} rolls in {timeInSeconds(startTime, endTime)} seconds</p> : \"\"}\n        </div>\n    )\n}\n\nexport default Tenzies;","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Die.js",[],"C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Question.js",["65","66"],"import React, { useEffect, useState } from \"react\"\r\nimport Quiz from \"./Quiz\"\r\nimport QuizOption from \"./QuizOption\"\r\nfunction Question(props) {\r\n\r\n    const [chosen, setChosen] = useState([false,false,false,false])\r\n    const [randomizedOptions, setRandomizedOptions] = useState(false)\r\n    const [options, setOptions] = useState([])\r\n    console.log(`   Question props: ${JSON.stringify(props.data)}`)\r\n    var data = props.data\r\n    var correct = data.correct_answer\r\n    \r\n    useEffect(() => {\r\n        var correct = data.correct_answer\r\n        var incorrect = data.incorrect_answers\r\n        var temp = [...incorrect, correct].sort((a, b) => 0.49 - Math.random())\r\n        setOptions(temp)\r\n        setRandomizedOptions(true)\r\n        return function cleanup() {\r\n            setChosen([false,false,false,false])\r\n        }\r\n    },[])\r\n\r\n    function handleClick(val, id) {\r\n        if (!chosen.some(elem => elem)) {\r\n            setChosen(prev => prev.map((elem, ind)=> {\r\n                if (ind === id) {\r\n                    if (val === correct) {\r\n                        props.handleClick();\r\n                    }\r\n                    return true\r\n                }\r\n                return elem;\r\n            }))\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"main-container question\">\r\n            <h1>Question {props.id + 1}</h1>\r\n            <h3 dangerouslySetInnerHTML={{ __html: props.data.question}}></h3>\r\n            <div className=\"question--options\">\r\n                {randomizedOptions ? options.map((val,index) => <QuizOption \r\n                    handleClick={() => handleClick(val, index)}\r\n                    option={val}\r\n                    isCorrect={val === props.data.correct_answer ? true : false}\r\n                    chosen={chosen[index]}\r\n                />) : <div></div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question;","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Quiz.js",["67","68"],"import React, {useState, useEffect} from \"react\"\r\nimport { nanoid } from 'nanoid'\r\nimport Question from \"./Question\"\r\n\r\nfunction Quiz() {\r\n    const [questions, setQuestions] = useState([])\r\n    const [loadedQuestions, setLoadedQuestions] = useState(false)\r\n    const [correctlyAnswered, setCorrectlyAnswered] = useState(0)\r\n    const [questionOptions, setQuestionOptions] = useState({\r\n        numberOfQuestions: 5,\r\n        difficulty: \"easy\"\r\n    })\r\n    console.log(`questionOptions: ${questionOptions.numberOfQuestions} ${questionOptions.difficulty}`)\r\n\r\n    const [questionElements, setQuestionElements] = useState()\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(`Running useEffect to create question elements`)\r\n        if (questions.length > 0) {\r\n            const arr = []\r\n            for (let i = 0; i < questionOptions.numberOfQuestions; i++) {\r\n                arr.push(\r\n                    <Question \r\n                    key={nanoid()} \r\n                    id={i} \r\n                    data={questions[i]} \r\n                    handleClick={() => handleCorrect()}\r\n                />  \r\n                )\r\n            }\r\n            setQuestionElements(arr)\r\n        } \r\n    }, [questions])\r\n\r\n    function handleClick() {\r\n        setQuestions([])\r\n        getData()\r\n        scrollToTop()\r\n    }\r\n\r\n    async function getData() {       \r\n        const response = await fetch(`api/quiz?difficulty=${questionOptions.difficulty}&amount=${questionOptions.numberOfQuestions}`)\r\n        const data = await response.json()\r\n        setQuestions(data)\r\n        setCorrectlyAnswered(0)\r\n        setLoadedQuestions(true)\r\n        \r\n    }\r\n\r\n    function handleCorrect() {\r\n        setCorrectlyAnswered(prev => prev + 1)\r\n    }\r\n\r\n    function scrollToTop() {\r\n        window.scrollTo({\r\n          top: 0,\r\n          behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    function handleForm(event) {\r\n        const {value, name} = event.target\r\n        setQuestionOptions(prev => ({   \r\n                ...prev,\r\n                [name]: value\r\n            }\r\n        ))\r\n    }\r\n    return loadedQuestions ? (\r\n       <div className=\"quiz\">\r\n            {questionElements}\r\n            <p>Correctly answered {correctlyAnswered} / {questionOptions.numberOfQuestions}</p>\r\n            <form>\r\n                <label>\r\n                    Number of questions:\r\n                    <select value={questionOptions.numberOfQuestions} onChange={(event) => handleForm(event)} name=\"numberOfQuestions\">\r\n                        {[...Array(25).keys()].map(elem => (\r\n                            <option \r\n                                key={nanoid()} \r\n                                id={elem} \r\n                                value={elem+1} \r\n                            > {elem+1} </option>) \r\n                        )}\r\n                        {/*<option value={5} name={\"numberOfQuestions\"}> 5</option>\r\n                        <option value={10} name=\"numberOfQuestions\"> 10</option>\r\n                        <option value={15} name=\"numberOfQuestions\"> 15</option>*/}\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Difficulty:\r\n                    <select value={questionOptions.difficulty} onChange={(event) => handleForm(event)} name=\"difficulty\">\r\n                        <option> Easy </option>\r\n                        <option> Medium </option>\r\n                        <option> Hard </option>\r\n                    </select>\r\n                </label>\r\n                \r\n            </form>\r\n            <button \r\n                className=\"blue-button\"\r\n                onClick={handleClick}\r\n            > Play Again </button>\r\n            <hr></hr>\r\n            <h3>Technologies used</h3>\r\n            <p>Created in React using functional components and Hooks such as <a href=\"https://reactjs.org/docs/hooks-state.html\">useState </a>\r\n            and <a href=\"https://reactjs.org/docs/hooks-effect.html\">useEffect</a>.<br/>\r\n            <a href=\"https://reactjs.org/docs/lifting-state-up.html\">State has been lifted</a> several times to accomidate functionality</p>\r\n            <p>Data is queried through the backend written in C# which then makes a call to a REST API</p>\r\n            <p>TODO:</p>\r\n            <ul>\r\n                <li>Use token to always get fresh questions in a session</li>\r\n                <li>Styling</li>\r\n                <li>Display number of correctly answered questions</li>\r\n                <li>Be able to choose difficulty and categories of questions (will probably need controlled forms)</li>\r\n                <li>Store questions in SQL database instead of calling API each time</li>\r\n            </ul>\r\n       </div>\r\n    ) : <p>Fetching questions</p>\r\n}\r\n\r\nexport default Quiz","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\QuizOption.js",["69","70"],"import React, {useState} from \"react\";\r\n\r\nexport default function QuizOption(props) {\r\n    const styles = {\r\n        backgroundColor: 'green'\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onClick={() => props.handleClick()}\r\n            className={props.chosen\r\n                ? props.isCorrect ? \"option-chosen\" : \"option-wrong\"\r\n                : \"option-notchosen\"}\r\n        >{props.option}</div>\r\n    )\r\n}","C:\\Users\\mml.it-minds.dk\\csharpreact\\ClientApp\\src\\components\\Notes.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":37,"nodeType":"79","messageId":"80","endLine":1,"endColumn":46},{"ruleId":"81","severity":1,"message":"82","line":19,"column":8,"nodeType":"83","endLine":19,"endColumn":17,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":43,"column":8,"nodeType":"83","endLine":43,"endColumn":14,"suggestions":"86"},{"ruleId":"77","severity":1,"message":"87","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":12},{"ruleId":"81","severity":1,"message":"88","line":22,"column":7,"nodeType":"83","endLine":22,"endColumn":9,"suggestions":"89"},{"ruleId":"81","severity":1,"message":"90","line":19,"column":8,"nodeType":"83","endLine":19,"endColumn":10,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"92","line":37,"column":8,"nodeType":"83","endLine":37,"endColumn":19,"suggestions":"93"},{"ruleId":"77","severity":1,"message":"94","line":1,"column":16,"nodeType":"79","messageId":"80","endLine":1,"endColumn":24},{"ruleId":"77","severity":1,"message":"95","line":4,"column":11,"nodeType":"79","messageId":"80","endLine":4,"endColumn":17},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'highscore.rolls' and 'numberOfRolls'. Either include them or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has missing dependencies: 'endTime', 'highscore.rolls', 'highscore.time', 'numberOfRolls', and 'startTime'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHighScore' needs the current value of 'highscore.rolls'.",["99"],"'Quiz' is defined but never used.","React Hook useEffect has missing dependencies: 'data.correct_answer' and 'data.incorrect_answers'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'questionOptions.numberOfQuestions'. Either include it or remove the dependency array.",["102"],"'useState' is defined but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [highscore.rolls, numberOfRolls, tenzies]",{"range":"113","text":"114"},"Update the dependencies array to be: [dice, endTime, highscore.rolls, highscore.time, numberOfRolls, startTime]",{"range":"115","text":"116"},"Update the dependencies array to be: [data.correct_answer, data.incorrect_answers]",{"range":"117","text":"118"},"Update the dependencies array to be: [getData]",{"range":"119","text":"120"},"Update the dependencies array to be: [questionOptions.numberOfQuestions, questions]",{"range":"121","text":"122"},[718,727],"[highscore.rolls, numberOfRolls, tenzies]",[1695,1701],"[dice, endTime, highscore.rolls, highscore.time, numberOfRolls, startTime]",[838,840],"[data.correct_answer, data.incorrect_answers]",[675,677],"[getData]",[1252,1263],"[questionOptions.numberOfQuestions, questions]"]