{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mml.it-minds.dk\\\\csharpreact\\\\ClientApp\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { nanoid } from 'nanoid';\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [loadedQuestions, setLoadedQUestions] = useState(false);\n  console.log(`Questions: ${questions}`);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  async function getData() {\n    const response = await fetch('api/testing');\n    const data = await response.json();\n    console.log(data);\n    setQuestions(data);\n    setLoadedQUestions(true);\n  }\n\n  return loadedQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz\",\n    children: [[...Array(5).keys()].map(elem => /*#__PURE__*/_jsxDEV(Question, {\n      id: elem,\n      data: questions[elem]\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 47\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"blue-button\",\n      onClick: getData,\n      children: \"New Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Technologies used\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created in React using functional components and Hooks such as \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/hooks-state.html\",\n        children: \"useState \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 79\n      }, this), \"and \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/hooks-effect.html\",\n        children: \"useEffect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/lifting-state-up.html\",\n        children: \"State has been lifted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), \" several times to accomidate functionality\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Data is queried through the backend written in C# which then makes a call to a REST API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"TODO:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Use token to awlays get fresh questions in a session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Styling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Display number of correctly answered questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Be able to choose difficulty and categories of questions (will probably need controlled forms)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 8\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Fetching questions\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"ECRe8XxYn58lMh6DjV92hIMURLc=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/mml.it-minds.dk/csharpreact/ClientApp/src/components/Quiz.js"],"names":["React","useState","useEffect","nanoid","Question","Quiz","questions","setQuestions","loadedQuestions","setLoadedQUestions","console","log","getData","response","fetch","data","json","Array","keys","map","elem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,KAAD,CAAtD;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAaL,SAAU,EAApC;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,OAAf,GAAyB;AACrB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACAR,IAAAA,YAAY,CAACQ,IAAD,CAAZ;AACAN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,SAAOD,eAAe,gBACnB;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eACM,CAAC,GAAGS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,EAAJ,EAAqBC,GAArB,CAAyBC,IAAI,iBAAI,QAAC,QAAD;AAAyB,MAAA,EAAE,EAAEA,IAA7B;AAAmC,MAAA,IAAI,EAAEd,SAAS,CAACc,IAAD;AAAlD,OAAejB,MAAM,EAArB;AAAA;AAAA;AAAA;AAAA,YAAjC,CADN,eAEK;AACI,MAAA,SAAS,EAAC,aADd;AAEI,MAAA,OAAO,EAAES,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFL,eAMK;AAAA;AAAA;AAAA;AAAA,YANL,eAOK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPL,eAQK;AAAA,iGAAkE;AAAG,QAAA,IAAI,EAAC,2CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAlE,uBACI;AAAG,QAAA,IAAI,EAAC,4CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEA;AAAG,QAAA,IAAI,EAAC,gDAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YARL,eAWK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXL,eAYK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZL,eAaK;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbL;AAAA;AAAA;AAAA;AAAA;AAAA,UADmB,gBAqBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UArBJ;AAsBH;;GAtCQP,I;;KAAAA,I;AAwCT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport { nanoid } from 'nanoid'\r\nimport Question from \"./Question\"\r\n\r\nfunction Quiz() {\r\n    const [questions, setQuestions] = useState([])\r\n    const [loadedQuestions, setLoadedQUestions] = useState(false)\r\n    console.log(`Questions: ${questions}`)\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    async function getData() {\r\n        const response = await fetch('api/testing')\r\n        const data = await response.json()\r\n        console.log(data)\r\n        setQuestions(data)\r\n        setLoadedQUestions(true)\r\n    }\r\n\r\n    return loadedQuestions ? (\r\n       <div className=\"quiz\">\r\n            {[...Array(5).keys()].map(elem => <Question key={nanoid()} id={elem} data={questions[elem]} /> )}\r\n            <button \r\n                className=\"blue-button\"\r\n                onClick={getData}\r\n            >New Questions</button>\r\n            <hr></hr>\r\n            <h3>Technologies used</h3>\r\n            <p>Created in React using functional components and Hooks such as <a href=\"https://reactjs.org/docs/hooks-state.html\">useState </a>\r\n            and <a href=\"https://reactjs.org/docs/hooks-effect.html\">useEffect</a>\r\n            <a href=\"https://reactjs.org/docs/lifting-state-up.html\">State has been lifted</a> several times to accomidate functionality</p>\r\n            <p>Data is queried through the backend written in C# which then makes a call to a REST API</p>\r\n            <p>TODO:</p>\r\n            <ul>\r\n                <li>Use token to awlays get fresh questions in a session</li>\r\n                <li>Styling</li>\r\n                <li>Display number of correctly answered questions</li>\r\n                <li>Be able to choose difficulty and categories of questions (will probably need controlled forms)</li>\r\n            </ul>\r\n       </div>\r\n    ) : <p>Fetching questions</p>\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}