{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mml.it-minds.dk\\\\csharpreact\\\\ClientApp\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { nanoid } from 'nanoid';\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const NUM_OF_QUESTIONS = 5;\n  const [questions, setQuestions] = useState([]);\n  const [loadedQuestions, setLoadedQuestions] = useState(false);\n  const [correctlyAnswered, setCorrectlyAnswered] = useState(0);\n  const [questionOptions, setQuestionOptions] = useState({\n    numberOfQuestions: NUM_OF_QUESTIONS,\n    difficulty: \"easy\"\n  });\n  console.log(`questionOptions: ${questionOptions.numberOfQuestions} ${questionOptions.difficulty}`);\n  const [questionElements, setQuestionElements] = useState();\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    if (questions.length > 0) {\n      setQuestionElements([...Array(NUM_OF_QUESTIONS).keys()].map(elem => {\n        console.log(`elem ${elem}`);\n        console.log(questions.length);\n        return /*#__PURE__*/_jsxDEV(Question, {\n          id: elem,\n          data: questions[elem],\n          handleClick: () => handleCorrect()\n        }, nanoid(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 24\n        }, this);\n      }));\n    }\n  }, [questions]);\n\n  function handleClick() {\n    setQuestions([]);\n    getData();\n    scrollToTop();\n  }\n\n  console.log(`questions: ${questions}`);\n\n  async function getData() {\n    const response = await fetch(`api/quiz?difficulty=${questionOptions.difficulty}&amount=${questionOptions.numberOfQuestions}`);\n    const data = await response.json();\n    console.log(`data: ${data}`);\n    setQuestions(data);\n    setCorrectlyAnswered(0);\n    setLoadedQuestions(true);\n  }\n\n  function handleCorrect() {\n    console.log(\"here\");\n    setCorrectlyAnswered(prev => prev + 1);\n  }\n\n  function scrollToTop() {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  function handleForm(event) {\n    const {\n      value,\n      name\n    } = event.target;\n    console.log(event.target);\n    console.log(`value: ${value} name: ${name}`);\n    setQuestionOptions(prev => ({ ...prev,\n      [name]: value\n    }));\n  }\n\n  return loadedQuestions ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz\",\n    children: [questionElements, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Correctly answered \", correctlyAnswered, \" / \", NUM_OF_QUESTIONS]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of questions:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: questionOptions.numberOfQuestions,\n          onChange: event => handleForm(event),\n          name: \"numberOfQuestions\",\n          children: [...Array(25).keys()].map(elem => /*#__PURE__*/_jsxDEV(\"option\", {\n            id: elem,\n            value: elem + 1,\n            children: [\" \", elem + 1, \" \"]\n          }, nanoid(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Difficulty:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: questionOptions.difficulty,\n          onChange: event => handleForm(event),\n          name: \"difficulty\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \" Easy \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \" Medium \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            children: \" Hard \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"blue-button\",\n      onClick: handleClick,\n      children: \" Play Again \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Technologies used\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created in React using functional components and Hooks such as \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/hooks-state.html\",\n        children: \"useState \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 79\n      }, this), \"and \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/hooks-effect.html\",\n        children: \"useEffect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 84\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://reactjs.org/docs/lifting-state-up.html\",\n        children: \"State has been lifted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), \" several times to accomidate functionality\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Data is queried through the backend written in C# which then makes a call to a REST API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"TODO:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Use token to always get fresh questions in a session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Styling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Display number of correctly answered questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Be able to choose difficulty and categories of questions (will probably need controlled forms)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Store questions in SQL database instead of calling API each time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 8\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Fetching questions\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"T466QWyz/yHUg1KrlDq87p6Jx6Q=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/mml.it-minds.dk/csharpreact/ClientApp/src/components/Quiz.js"],"names":["React","useState","useEffect","nanoid","Question","Quiz","NUM_OF_QUESTIONS","questions","setQuestions","loadedQuestions","setLoadedQuestions","correctlyAnswered","setCorrectlyAnswered","questionOptions","setQuestionOptions","numberOfQuestions","difficulty","console","log","questionElements","setQuestionElements","getData","length","Array","keys","map","elem","handleCorrect","handleClick","scrollToTop","response","fetch","data","json","prev","window","scrollTo","top","behavior","handleForm","event","value","name","target"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport { nanoid } from 'nanoid'\r\nimport Question from \"./Question\"\r\n\r\nfunction Quiz() {\r\n    const NUM_OF_QUESTIONS = 5;\r\n    const [questions, setQuestions] = useState([])\r\n    const [loadedQuestions, setLoadedQuestions] = useState(false)\r\n    const [correctlyAnswered, setCorrectlyAnswered] = useState(0)\r\n    const [questionOptions, setQuestionOptions] = useState({\r\n        numberOfQuestions: NUM_OF_QUESTIONS,\r\n        difficulty: \"easy\"\r\n    })\r\n    console.log(`questionOptions: ${questionOptions.numberOfQuestions} ${questionOptions.difficulty}`)\r\n\r\n    const [questionElements, setQuestionElements] = useState()\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (questions.length > 0) {\r\n            setQuestionElements([...Array(NUM_OF_QUESTIONS).keys()].map(elem => {\r\n                console.log(`elem ${elem}`)\r\n                console.log(questions.length)\r\n                return <Question \r\n                    key={nanoid()} \r\n                    id={elem} \r\n                    data={questions[elem]} \r\n                    handleClick={() => handleCorrect()}\r\n                />}))\r\n        } \r\n    }, [questions])\r\n\r\n    function handleClick() {\r\n        setQuestions([])\r\n        getData()\r\n        scrollToTop()\r\n    }\r\n\r\n    console.log(`questions: ${questions}`)\r\n    async function getData() {\r\n        \r\n        const response = await fetch(`api/quiz?difficulty=${questionOptions.difficulty}&amount=${questionOptions.numberOfQuestions}`)\r\n        const data = await response.json()\r\n        console.log(`data: ${data}`)\r\n        setQuestions(data)\r\n        setCorrectlyAnswered(0)\r\n        setLoadedQuestions(true)\r\n        \r\n    }\r\n\r\n    function handleCorrect() {\r\n        console.log(\"here\")\r\n        setCorrectlyAnswered(prev => prev + 1)\r\n    }\r\n\r\n\r\n    function scrollToTop() {\r\n        window.scrollTo({\r\n          top: 0,\r\n          behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    function handleForm(event) {\r\n        const {value, name} = event.target\r\n        console.log(event.target)\r\n        console.log(`value: ${value} name: ${name}`)\r\n        setQuestionOptions(prev => ({   \r\n                ...prev,\r\n                [name]: value\r\n            }\r\n        ))\r\n    }\r\n    return loadedQuestions ? (\r\n       <div className=\"quiz\">\r\n            {questionElements}\r\n            <p>Correctly answered {correctlyAnswered} / {NUM_OF_QUESTIONS}</p>\r\n            <form>\r\n                <label>\r\n                    Number of questions:\r\n                    <select value={questionOptions.numberOfQuestions} onChange={(event) => handleForm(event)} name=\"numberOfQuestions\">\r\n                        {[...Array(25).keys()].map(elem => (\r\n                            <option \r\n                                key={nanoid()} \r\n                                id={elem} \r\n                                value={elem+1} \r\n                            > {elem+1} </option>) \r\n                        )}\r\n                        {/*<option value={5} name={\"numberOfQuestions\"}> 5</option>\r\n                        <option value={10} name=\"numberOfQuestions\"> 10</option>\r\n                        <option value={15} name=\"numberOfQuestions\"> 15</option>*/}\r\n                    </select>\r\n                </label>\r\n                <label>\r\n                    Difficulty:\r\n                    <select value={questionOptions.difficulty} onChange={(event) => handleForm(event)} name=\"difficulty\">\r\n                        <option> Easy </option>\r\n                        <option> Medium </option>\r\n                        <option> Hard </option>\r\n                    </select>\r\n                </label>\r\n                \r\n            </form>\r\n            <button \r\n                className=\"blue-button\"\r\n                onClick={handleClick}\r\n            > Play Again </button>\r\n            <hr></hr>\r\n            <h3>Technologies used</h3>\r\n            <p>Created in React using functional components and Hooks such as <a href=\"https://reactjs.org/docs/hooks-state.html\">useState </a>\r\n            and <a href=\"https://reactjs.org/docs/hooks-effect.html\">useEffect</a>.<br/>\r\n            <a href=\"https://reactjs.org/docs/lifting-state-up.html\">State has been lifted</a> several times to accomidate functionality</p>\r\n            <p>Data is queried through the backend written in C# which then makes a call to a REST API</p>\r\n            <p>TODO:</p>\r\n            <ul>\r\n                <li>Use token to always get fresh questions in a session</li>\r\n                <li>Styling</li>\r\n                <li>Display number of correctly answered questions</li>\r\n                <li>Be able to choose difficulty and categories of questions (will probably need controlled forms)</li>\r\n                <li>Store questions in SQL database instead of calling API each time</li>\r\n            </ul>\r\n       </div>\r\n    ) : <p>Fetching questions</p>\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}